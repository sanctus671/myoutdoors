{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2.entry.js"],"names":["infiniteScrollCss","InfiniteScroll","hostRef","registerInstance","ionInfinite","createEvent","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","emit","val","lastIndexOf","parseFloat","enableScrollEvents","contentEl","closest","console","error","getScrollElement","thresholdChanged","disabledChanged","writeTask","clientHeight","undefined","prev","requestAnimationFrame","readTask","newScrollTop","shouldListen","addEventListener","removeEventListener","mode","getIonMode","h","Host","class","getElement","style","infiniteScrollContentIosCss","infiniteScrollContentMdCss","InfiniteScrollContent","loadingSpinner","config","get","name","loadingText","innerHTML","sanitizeDOMString","ios","md"],"mappings":"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","file":"14.js","sourcesContent":["import { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-92848855.js';\nimport { b as getIonMode, c as config } from './ionic-global-23e7365a.js';\nimport { s as sanitizeDOMString } from './index-79d74e0b.js';\n\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nconst InfiniteScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n        this.thrPx = 0;\n        this.thrPc = 0;\n        this.didFire = false;\n        this.isBusy = false;\n        this.isLoading = false;\n        /**\n         * The threshold distance from the bottom\n         * of the content to call the `infinite` output event when scrolled.\n         * The threshold value can be either a percent, or\n         * in pixels. For example, use the value of `10%` for the `infinite`\n         * output event to get called when the user has scrolled 10%\n         * from the bottom of the page. Use the value `100px` when the\n         * scroll is within 100 pixels from the bottom of the page.\n         */\n        this.threshold = '15%';\n        /**\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\n         * will be removed.\n         *\n         * Set this to true to disable the infinite scroll from actively\n         * trying to receive new data while scrolling. This is useful\n         * when it is known that there is no more data that can be added, and\n         * the infinite scroll is no longer needed.\n         */\n        this.disabled = false;\n        /**\n         * The position of the infinite scroll element.\n         * The value can be either `top` or `bottom`.\n         */\n        this.position = 'bottom';\n        this.onScroll = () => {\n            const scrollEl = this.scrollEl;\n            if (!scrollEl || !this.canStart()) {\n                return 1;\n            }\n            const infiniteHeight = this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            const scrollTop = scrollEl.scrollTop;\n            const scrollHeight = scrollEl.scrollHeight;\n            const height = scrollEl.offsetHeight;\n            const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\n            const distanceFromInfinite = (this.position === 'bottom')\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!this.didFire) {\n                    this.isLoading = true;\n                    this.didFire = true;\n                    this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            else {\n                this.didFire = false;\n            }\n            return 4;\n        };\n    }\n    thresholdChanged() {\n        const val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = (parseFloat(val) / 100);\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    }\n    disabledChanged() {\n        const disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.thresholdChanged();\n        this.disabledChanged();\n        if (this.position === 'top') {\n            writeTask(() => {\n                if (this.scrollEl) {\n                    this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n                }\n            });\n        }\n    }\n    disconnectedCallback() {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    }\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    async complete() {\n        const scrollEl = this.scrollEl;\n        if (!this.isLoading || !scrollEl) {\n            return;\n        }\n        this.isLoading = false;\n        if (this.position === 'top') {\n            /**\n             * New content is being added at the top, but the scrollTop position stays the same,\n             * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n             * (Frame 1)\n             *    - complete() is called, but the UI hasn't had time to update yet.\n             *    - Save the current content dimensions.\n             *    - Wait for the next frame using _dom.read, so the UI will be updated.\n             * (Frame 2)\n             *    - Read the new content dimensions.\n             *    - Calculate the height difference and the new scroll position.\n             *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n             * (Still frame 2, if I'm correct)\n             *    - Change the scroll position (= visually maintain the scroll position).\n             *    - Change the state to re-enable the InfiniteScroll.\n             *    - This should be after changing the scroll position, or it could\n             *    cause the InfiniteScroll to be triggered again immediately.\n             * (Frame 3)\n             *    Done.\n             */\n            this.isBusy = true;\n            // ******** DOM READ ****************\n            // Save the current content dimensions before the UI updates\n            const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n            // ******** DOM READ ****************\n            requestAnimationFrame(() => {\n                readTask(() => {\n                    // UI has updated, save the new content dimensions\n                    const scrollHeight = scrollEl.scrollHeight;\n                    // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                    const newScrollTop = scrollHeight - prev;\n                    // ******** DOM WRITE ****************\n                    requestAnimationFrame(() => {\n                        writeTask(() => {\n                            scrollEl.scrollTop = newScrollTop;\n                            this.isBusy = false;\n                        });\n                    });\n                });\n            });\n        }\n    }\n    canStart() {\n        return (!this.disabled &&\n            !this.isBusy &&\n            !!this.scrollEl &&\n            !this.isLoading);\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        const disabled = this.disabled;\n        return (h(Host, { class: {\n                [mode]: true,\n                'infinite-scroll-loading': this.isLoading,\n                'infinite-scroll-enabled': !disabled\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"threshold\": [\"thresholdChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n};\nInfiniteScroll.style = infiniteScrollCss;\n\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst InfiniteScrollContent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    componentDidLoad() {\n        if (this.loadingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { class: {\n                [mode]: true,\n                // Used internally for styling\n                [`infinite-scroll-content-${mode}`]: true\n            } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\n    }\n};\nInfiniteScrollContent.style = {\n    ios: infiniteScrollContentIosCss,\n    md: infiniteScrollContentMdCss\n};\n\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n"],"sourceRoot":"webpack:///"}